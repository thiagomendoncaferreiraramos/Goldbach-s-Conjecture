("gcd_rem" gcd_rem gcd_rem_linear_comb_TCC1 0 (gcd_rem_linear_comb_TCC1-1 nil 3939821258 ("" (subtype-tcc) nil nil) ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)) nil (gcd_rem_linear_comb subtype "gcd_rem.n" "{n: integers.int | (booleans.NOT)((number_fields.+)(real_defs.abs(gcd_rem.m), real_defs.abs(n)) = 0)}")))("gcd_rem" gcd_rem linear_comb_form_TCC1 0 (linear_comb_form_TCC1-1 nil 3940523670 ("" (grind) nil nil) ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)) nil (linear_comb_form subtype "gcd_rem.n" "{n: integers.int | (booleans.NOT)((number_fields.+)(real_defs.abs(gcd_rem.m), real_defs.abs(n)) = 0)}")))("gcd_rem" gcd_rem gcd_rem_linear_comb_TCC1 0 (gcd_rem_linear_comb_TCC1-1 nil 3941232093 ("" (subtype-tcc) nil nil) nil nil (gcd_rem_linear_comb subtype "gcd_rem.n" "{n: integers.posnat | gcd_rem.m /= n}")))("gcd_rem" gcd_rem gcd_rem_linear_comb_TCC2 0 (gcd_rem_linear_comb_TCC2-1 nil 3941232093 ("" (subtype-tcc) nil nil) ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)) nil (gcd_rem_linear_comb subtype "gcd_rem.n" "{n: integers.int | (booleans.NOT)((number_fields.+)(real_defs.abs(gcd_rem.m), real_defs.abs(n)) = 0)}")))("gcd_rem" gcd_rem linear_comb_form_TCC1 0 (linear_comb_form_TCC1-1 nil 3941232093 ("" (subtype-tcc) nil nil) nil nil (linear_comb_form subtype "gcd_rem.n" "{n: integers.int | (booleans.NOT)((number_fields.+)(real_defs.abs(gcd_rem.m), real_defs.abs(n)) = 0)}")))("gcd_rem" gcd_rem p_TCC1 0 (p_TCC1-1 nil 3940631261 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (length def-decl "nat" list_props nil)) nil (p subtype "gcd_rem.l1" "(list_adt[[nat, nat]].cons?)")))("gcd_rem" gcd_rem p_TCC2 0 (p_TCC2-1 nil 3940631261 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) nil (p subtype "gcd_rem.l2" "(list_adt[nat].cons?)")))("gcd_rem" gcd_rem p_TCC3 0 (p_TCC3-1 nil 3940631261 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) nil (p subtype "gcd_rem.l3" "(list_adt[[int, nat, nat]].cons?)")))("gcd_rem" gcd_rem p_TCC4 0 (p_TCC4-1 nil 3940631261 ("" (skeep) (("" (typepred "l2") (("" (expand "length" -2) (("" (assert) (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ((length def-decl "nat" list_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) nil (p subtype "list_adt[nat].cdr(gcd_rem.l2)" "{l2: list_adt[nat].list | list_props[[nat, nat]].length(list_adt[[nat, nat]].cdr(gcd_rem.l1)) = list_props[nat].length(l2)}")))("gcd_rem" gcd_rem p_TCC5 0 (p_TCC5-1 nil 3940631261 ("" (skeep) (("" (typepred "l3") (("" (expand "length" -1) (("" (assert) (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ((length def-decl "nat" list_props nil) (list type-decl nil list_adt nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) nil (p subtype "list_adt[[int, nat, nat]].cdr(gcd_rem.l3)" "{l3: list_adt[[int, nat, nat]].list | list_props[[nat, nat]].length(list_adt[[nat, nat]].cdr(gcd_rem.l1)) = list_props[[int, nat, nat]].length(l3)}")))("gcd_rem" gcd_rem p_TCC6 0 (p_TCC6-1 nil 3940631261 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (p termination "gcd_rem.p(list_adt[[nat, nat]].cdr(gcd_rem.l1), list_adt[nat].cdr(gcd_rem.l2), list_adt[[int, nat, nat]].cdr(gcd_rem.l3))" "nil")))("gcd_rem" gcd_rem lc_factor_TCC1 0 (lc_factor_TCC1-1 nil 3941635930 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)) nil (lc_factor subtype "gcd_rem.q2" "{n: integers.int | (booleans.NOT)((number_fields.+)(real_defs.abs(n), real_defs.abs(gcd_rem.q1)) = 0)}")))("gcd_rem" gcd_rem lc_factor_TCC2 0 (lc_factor_TCC4-1 nil 3941635930 ("" (skeep) (("" (case "linear_comb(q1, q2)`1 >= 0") (("1" (rewrite "pos_times_ge") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil) ((linear_comb def-decl "{ret: [nat, nat] | gcd_rem(m, n) = ret`1 * m - ret`2 * n}" gcd_rem nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (gcd_rem def-decl "nat" gcd_rem nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posnat nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (pos_times_ge formula-decl nil real_props nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (lc_factor subtype "number_fields.*(gcd_rem.k, gcd_rem.linear_comb(gcd_rem.q1, gcd_rem.q2)`1)" "nat")))("gcd_rem" gcd_rem lc_factor_TCC3 0 (lc_factor_TCC5-1 nil 3941635930 ("" (skeep) (("" (case "linear_comb(q1, q2)`2 >= 0") (("1" (rewrite "pos_times_ge") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil) ((linear_comb def-decl "{ret: [nat, nat] | gcd_rem(m, n) = ret`1 * m - ret`2 * n}" gcd_rem nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (gcd_rem def-decl "nat" gcd_rem nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posnat nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (pos_times_ge formula-decl nil real_props nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (lc_factor subtype "number_fields.*(gcd_rem.k, gcd_rem.linear_comb(gcd_rem.q1, gcd_rem.q2)`2)" "nat")))("gcd_rem" gcd_rem lc_factor_TCC4 0 (lc_factor_TCC6-1 nil 3941635930 ("" (subtype-tcc) nil nil) ((nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (gcd_rem def-decl "nat" gcd_rem nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_times_int_is_int application-judgement "int" integers nil)) nil (lc_factor subtype "(number_fields.*(gcd_rem.k, gcd_rem.linear_comb(gcd_rem.q1, gcd_rem.q2)`1), number_fields.*(gcd_rem.k, gcd_rem.linear_comb(gcd_rem.q1, gcd_rem.q2)`2))" "{ret: [naturalnumbers.nat, naturalnumbers.nat] | gcd_rem.k = (number_fields.-)(number_fields.*(ret`1, gcd_rem.q1), number_fields.*(ret`2, gcd_rem.q2))}")))("gcd_rem" gcd_rem lc_factor_TCC5 0 (lc_factor_TCC8-1 nil 3941635930 ("" (subtype-tcc) nil nil) nil nil (lc_factor subtype "gcd_rem.q1" "{n: integers.posnat | gcd_rem.q2 /= n}")))("gcd_rem" gcd_rem lc_factor_TCC6 0 (lc_factor_TCC9-1 nil 3941635930 ("" (skeep) (("" (case "-k >= 0") (("1" (case "linear_comb(q2, q1)`2 >= 0") (("1" (rewrite "pos_times_ge") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil) ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_int_is_int application-judgement "int" integers nil) (pos_times_ge formula-decl nil real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "[bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (gcd_rem def-decl "nat" gcd_rem nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (linear_comb def-decl "{ret: [nat, nat] | gcd_rem(m, n) = ret`1 * m - ret`2 * n}" gcd_rem nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (lc_factor subtype "number_fields.*((number_fields.-)(gcd_rem.k), gcd_rem.linear_comb(gcd_rem.q2, gcd_rem.q1)`2)" "nat")))("gcd_rem" gcd_rem lc_factor_TCC7 0 (lc_factor_TCC10-1 nil 3941635930 ("" (skeep) (("" (case "-k >= 0") (("1" (case "linear_comb(q2, q1)`1 >= 0") (("1" (rewrite "pos_times_ge") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil) ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_int_is_int application-judgement "int" integers nil) (pos_times_ge formula-decl nil real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "[bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (gcd_rem def-decl "nat" gcd_rem nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (linear_comb def-decl "{ret: [nat, nat] | gcd_rem(m, n) = ret`1 * m - ret`2 * n}" gcd_rem nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (lc_factor subtype "number_fields.*((number_fields.-)(gcd_rem.k), gcd_rem.linear_comb(gcd_rem.q2, gcd_rem.q1)`1)" "nat")))("gcd_rem" gcd_rem lc_factor_TCC8 0 (lc_factor_TCC11-1 nil 3941635930 ("" (skeep) (("" (assert) (("" (typepred "q2") (("" (rewrite "gcd_rem_commutes") (("" (use "gcd_rem_linear_comb") (("" (prop) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((minus_int_is_int application-judgement "int" integers nil) (int_times_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (gcd_rem_commutes formula-decl nil gcd_rem nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gcd_rem_linear_comb formula-decl nil gcd_rem nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (gcd_rem def-decl "nat" gcd_rem nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (lc_factor subtype "(number_fields.*((number_fields.-)(gcd_rem.k), gcd_rem.linear_comb(gcd_rem.q2, gcd_rem.q1)`2), number_fields.*((number_fields.-)(gcd_rem.k), gcd_rem.linear_comb(gcd_rem.q2, gcd_rem.q1)`1))" "{ret: [naturalnumbers.nat, naturalnumbers.nat] | gcd_rem.k = (number_fields.-)(number_fields.*(ret`1, gcd_rem.q1), number_fields.*(ret`2, gcd_rem.q2))}")))("gcd_rem" gcd_rem lc_factor_min_TCC1 0 (lc_factor_min_TCC3-1 nil 3941635930 ("" (skeep) (("" (case "nmod(lc_f`1, q2) >= 0") (("1" (expand "nmod") (("1" (replace -3 :dir rl) (("1" (assert) (("1" (case "q2*a > q2*b") (("1" (assert) nil nil) ("2" (assert) (("2" (hide-all-but (-5 1)) (("2" (use "both_sides_times_pos_neg_gt2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ((gcd_rem def-decl "nat" gcd_rem nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (nmod const-decl "below(m)" mod_nat ints) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (both_sides_times_pos_neg_gt2 formula-decl nil extra_real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (lc_factor_min subtype "(number_fields.-)(gcd_rem.lc_f`1, number_fields.*(gcd_rem.b, gcd_rem.q2))" "nat")))("gcd_rem" gcd_rem lc_factor_min_TCC2 0 (lc_factor_min_TCC4-1 nil 3941635930 ("" (skeep*) (("" (typepred "nmod(lc_f`2, q1)") (("" (case "lc_f`2 - b * q1 = nmod(lc_f`2, q1)") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ((gcd_rem def-decl "nat" gcd_rem nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (nmod const-decl "below(m)" mod_nat ints) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (div const-decl "upto(n)" div_nat ints) (lc_factor const-decl "{ret: [nat, nat] | k = ret`1 * q1 - ret`2 * q2}" gcd_rem nil) (int_times_int_is_int application-judgement "int" integers nil) (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (lc_factor_min subtype "(number_fields.-)(gcd_rem.lc_f`2, number_fields.*(gcd_rem.b, gcd_rem.q1))" "nat")))("gcd_rem" gcd_rem lc_factor_min_TCC3 0 (lc_factor_min_TCC5-1 nil 3941635930 ("" (skeep) (("" (prop) (("1" (typepred "lc_factor(k, q1, q2)") (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (typepred "y") (("2" (typepred "lc_factor(k, q1, q2)") (("2" (replace -3 :dir rl) (("2" (case "nmod(lc_f`2, q1) = lc_f`2 - b * q1") (("1" (replaces -1 :dir rl) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (lc_factor_min subtype "((number_fields.-)(gcd_rem.lc_f`1, number_fields.*(gcd_rem.b, gcd_rem.q2)), (number_fields.-)(gcd_rem.lc_f`2, number_fields.*(gcd_rem.b, gcd_rem.q1)))" "{ret: [naturalnumbers.nat, naturalnumbers.nat] | booleans.AND(gcd_rem.k = (number_fields.-)(number_fields.*(ret`1, gcd_rem.q1), number_fields.*(ret`2, gcd_rem.q2)), FORALL (x: naturalnumbers.nat, y: nat | gcd_rem.k = (number_fields.-)(number_fields.*(gcd_rem.x, gcd_rem.q1), number_fields.*(y, gcd_rem.q2))): booleans.AND(reals.<=(ret`1, x), reals.<=(ret`2, y)))}")))("gcd_rem" gcd_rem lc_factor_min_TCC4 0 (lc_factor_min_TCC6-1 nil 3941635930 ("" (subtype-tcc) nil nil) nil nil (lc_factor_min subtype "(number_fields.-)(gcd_rem.lc_f`1, number_fields.*(gcd_rem.a, gcd_rem.q2))" "nat")))("gcd_rem" gcd_rem lc_factor_min_TCC5 0 (lc_factor_min_TCC7-1 nil 3941635930 ("" (subtype-tcc) nil nil) nil nil (lc_factor_min subtype "(number_fields.-)(gcd_rem.lc_f`2, number_fields.*(gcd_rem.a, gcd_rem.q1))" "nat")))("gcd_rem" gcd_rem lc_factor_min_TCC6 0 (lc_factor_min_TCC8-1 nil 3941635930 ("" (subtype-tcc) nil nil) nil nil (lc_factor_min subtype "((number_fields.-)(gcd_rem.lc_f`1, number_fields.*(gcd_rem.a, gcd_rem.q2)), (number_fields.-)(gcd_rem.lc_f`2, number_fields.*(gcd_rem.a, gcd_rem.q1)))" "{ret: [naturalnumbers.nat, naturalnumbers.nat] | booleans.AND(gcd_rem.k = (number_fields.-)(number_fields.*(ret`1, gcd_rem.q1), number_fields.*(ret`2, gcd_rem.q2)), FORALL (x: naturalnumbers.nat, y: nat | gcd_rem.k = (number_fields.-)(number_fields.*(gcd_rem.x, gcd_rem.q1), number_fields.*(y, gcd_rem.q2))): booleans.AND(reals.<=(ret`1, x), reals.<=(ret`2, y)))}")))("Goldbach" Goldbach incong_int_TCC1 0 (incong_int_TCC1-1 nil 3944123220 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (length def-decl "nat" list_props nil)) nil (incong_int subtype "Goldbach.l1" "(list_adt[posnat].cons?)")))("Goldbach" Goldbach incong_int_TCC2 0 (incong_int_TCC2-1 nil 3944123220 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (length def-decl "nat" list_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) nil (incong_int subtype "Goldbach.l2" "(list_adt[nat].cons?)")))("Goldbach" Goldbach incong_int_TCC3 0 (incong_int_TCC3-1 nil 3944123531 ("" (skeep) (("" (typepred "l2") (("" (hide -1 1) (("" (hide -2) (("" (expand length -1 1) (("" (lift-if) (("" (prop) (("1" (grind) nil nil) ("2" (grind) (("2" (expand "length" -1 2) (("2" (lift-if) (("2" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((length def-decl "nat" list_props nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) nil (incong_int subtype "list_adt[nat].cdr(Goldbach.l2)" "{l2: list_adt[nat].list | list_props[posnat].length(list_adt[posnat].cdr(Goldbach.l1)) = list_props[nat].length(l2)}")))("Goldbach" Goldbach incong_int_TCC4 0 (incong_int_TCC3-1 nil 3944123220 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (div const-decl "upto(n)" div_nat ints) (nmod const-decl "below(m)" mod_nat ints) (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (incong_int termination "Goldbach.incong_int(Goldbach.n, list_adt[posnat].cdr(Goldbach.l1), list_adt[nat].cdr(Goldbach.l2))" "nil")))("Goldbach" Goldbach list_of_cong_TCC1 0 (list_of_cong_TCC1-1 nil 3944195522 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (length def-decl "nat" list_props nil)) nil (list_of_cong subtype "Goldbach.l1" "(list_adt[posnat].cons?)")))("Goldbach" Goldbach list_of_cong_TCC2 0 (list_of_cong_TCC2-1 nil 3944195522 ("" (skeep) (("" (typepred "l2") (("" (hide -1) (("" (grind) nil nil)) nil)) nil)) nil) ((length def-decl "nat" list_props nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) nil (list_of_cong subtype "Goldbach.l2" "(list_adt[nat].cons?)")))("Goldbach" Goldbach list_of_cong_TCC3 0 (list_of_cong_TCC3-1 nil 3944195522 ("" (skeep) (("" (typepred "l2") (("" (hide-all-but (-2 1 2)) (("" (expand "length" -1) (("" (lift-if) (("" (lift-if) (("" (lift-if) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((length def-decl "nat" list_props nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) nil (list_of_cong subtype "list_adt[nat].cdr(Goldbach.l2)" "{l2: list_adt[nat].list | list_props[posnat].length(list_adt[posnat].cdr(Goldbach.l1)) = list_props[nat].length(l2)}")))("Goldbach" Goldbach list_of_cong_TCC4 0 (list_of_cong_TCC4-1 nil 3944195522 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (div const-decl "upto(n)" div_nat ints) (nmod const-decl "below(m)" mod_nat ints) (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (list_of_cong termination "Goldbach.list_of_cong(Goldbach.n, list_adt[posnat].cdr(Goldbach.l1), list_adt[nat].cdr(Goldbach.l2))" "nil")))("Goldbach" Goldbach list_of_cong_correctness_TCC1 0 (list_of_cong_correctness_TCC1-1 nil 3944195522 ("" (subtype-tcc) nil nil) nil nil (list_of_cong_correctness subtype "Goldbach.i" "below[length[nat](l2)]")))("Goldbach" Goldbach signature_TCC1 0 (signature_TCC1-1 nil 3949606169 ("" (skeep) (("" (rewrite "every_nth") (("" (skeep) (("" (typepred "list_of_primes(n)") (("" (rewrite "every_nth") (("" (inst?) (("" (flatten) (("" (assert) (("" (expand "prime?") (("" (flatten) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((every_nth formula-decl nil list_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil) (list type-decl nil list_adt nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (every adt-def-decl "boolean" list_adt nil) (prime? const-decl "bool" primes ints) (list_of_primes def-decl "list[(prime?)]" Goldbach nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (below type-eq-decl nil naturalnumbers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (signature subtype "Goldbach.list_of_primes(Goldbach.n)" "list[posnat]")))("Goldbach" Goldbach signature_TCC2 0 (signature_TCC2-1 nil 3949606169 ("" (skeep) (("" (prop) (("1" (lemma "sign_aux_length") (("1" (inst?) nil nil)) nil) ("2" (lemma "sign_aux_correctness") (("2" (expand "signature_pred") (("2" (skeep) (("2" (inst -1 "m" "list_of_primes(n)" "i") nil nil)) nil)) nil)) nil)) nil)) nil) ((list_of_primes def-decl "list[(prime?)]" Goldbach nil) (prime? const-decl "bool" primes ints) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (sign_aux_length formula-decl nil Goldbach nil) (signature_pred const-decl "bool" Goldbach nil) (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (below type-eq-decl nil nat_types nil) (sign_aux def-decl "list[nat]" Goldbach nil) (sign_aux_correctness formula-decl nil Goldbach nil)) nil (signature subtype "Goldbach.sign_aux(Goldbach.m)(Goldbach.list_of_primes(Goldbach.n))" "(Goldbach.signature_pred(Goldbach.n))")))("Goldbach" Goldbach prod_list_TCC1 0 (prod_list_TCC1-1 nil 3948913552 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) nil (prod_list subtype "Goldbach.l" "(list_adt[nat].cons?)")))("Goldbach" Goldbach prod_list_TCC2 0 (prod_list_TCC2-1 nil 3948913552 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (prod_list termination "Goldbach.prod_list(list_adt[nat].cdr(Goldbach.l))" "nil")))