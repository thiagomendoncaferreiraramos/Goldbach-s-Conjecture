%% TCCs associated with theory Bin_tree2list
%% This file was automatically generated by PVS, please **do not modify** by hand.
Bin_tree2list_TCCS: THEORY BEGIN

	% Termination TCC generated (at line 13, column 39) for  BT2list(left)
	  % untried
	BT2list_TCC1: OBLIGATION
	FORALL (bt: Bin_tree[T], e: T, left, right: Bin_tree[T]):
	    bt = Bin_T(e, left, right) IMPLIES <<[T](left, bt)
	
	% Termination TCC generated (at line 13, column 60) for  BT2list(right)
	  % untried
	BT2list_TCC2: OBLIGATION
	FORALL (bt: Bin_tree[T], e: T, left, right: Bin_tree[T]):
	    bt = Bin_T(e, left, right) IMPLIES <<[T](right, bt)
	
	% The termination TCC (at line 20, column 36) in decl nil for
	% term generated from BT_length  BT_length(left)
	% The termination TCC (at line 21, column 36) in decl nil for
	% term generated from BT_length  BT_length(right)
	% The termination TCC (at line 29, column 32) in decl nil for
	% term generated from BT_sym?  BT_sym?(left)
	% The termination TCC (at line 29, column 50) in decl nil for
	% term generated from BT_sym?  BT_sym?(right)
	% Subtype TCC generated (at line 35, column 16) for  l
	% expected type  (cons?[T])
	  % untried
	list_pos_pred_TCC1: OBLIGATION
	FORALL (l: list[T]): NOT null?(l) IMPLIES cons?[T](l)
	
	% Subtype TCC generated (at line 35, column 30) for  0
	% expected type  below[length(l)]
	  % untried
	list_pos_pred_TCC2: OBLIGATION
	FORALL (l: list[T], P: [T -> bool]):
	    NOT null?(l) AND P(car(l)) IMPLIES 0 < length[T](l)
	
	% Termination TCC generated (at line 35, column 59) for
	% list_pos_pred(cdr(l), P)
	  % untried
	list_pos_pred_TCC3: OBLIGATION
	FORALL (l: list[T], P: [T -> bool]):
	    NOT null?(l) AND P(car(l)) IMPLIES length[T](cdr[T](l)) < length[T](l)
	
	% Subtype TCC generated (at line 35, column 32) for
	% map(LAMBDA (n: nat): n + 1)(list_pos_pred(cdr(l), P))
	% expected type  list[below[length(l)]]
	  % untried
	list_pos_pred_TCC4: OBLIGATION
	FORALL (l: list[T],
	          v:
	            [d1: {z: [list[T], [T -> bool]] | length[T](z`1) < length[T](l)} ->
	               list[below[length[T](d1`1)]]],
	          P: [T -> bool]):
	    NOT null?(l) AND P(car(l)) IMPLIES
	     every[number]
	         (LAMBDA (x: number):
	                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	             AND integer_pred(x) AND (x >= 0) AND (x < length[T](l)))
	         (map[nat, numfield](LAMBDA (n: nat): n + 1)(v(cdr[T](l), P)))
	
	% Termination TCC generated (at line 36, column 36) for
	% list_pos_pred(cdr(l), P)
	  % untried
	list_pos_pred_TCC5: OBLIGATION
	FORALL (l: list[T], P: [T -> bool]):
	    NOT null?(l) AND NOT P(car(l)) IMPLIES length[T](cdr[T](l)) < length[T](l)
	
	% Subtype TCC generated (at line 36, column 9) for
	% map(LAMBDA (n: nat): n + 1)(list_pos_pred(cdr(l), P))
	% expected type  list[below[length(l)]]
	  % untried
	list_pos_pred_TCC6: OBLIGATION
	FORALL (l: list[T],
	          v:
	            [d1: {z: [list[T], [T -> bool]] | length[T](z`1) < length[T](l)} ->
	               list[below[length[T](d1`1)]]],
	          P: [T -> bool]):
	    NOT null?(l) AND NOT P(car(l)) IMPLIES
	     every[number]
	         (LAMBDA (x: number):
	                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	             AND integer_pred(x) AND (x >= 0) AND (x < length[T](l)))
	         (map[nat, numfield](LAMBDA (n: nat): n + 1)(v(cdr[T](l), P)))
	
	% The subtype TCC (at line 35, column 77) in decl nil for
	 % term generated from list_pos_pred  l
	    % expected type  (cons?[T])
	  % is subsumed by list_pos_pred_TCC1

END Bin_tree2list_TCCS