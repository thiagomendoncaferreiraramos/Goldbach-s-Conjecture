%% TCCs associated with theory Goldbach
%% This file was automatically generated by PVS, please **do not modify** by hand.
Goldbach_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 14, column 47) for  n - 1
	% expected type  nat
	  % proved
	list_of_primes_TCC1: OBLIGATION
	FORALL (n: nat): NOT n < 2 AND prime?(n) IMPLIES n - 1 >= 0
	
	% Termination TCC generated (at line 14, column 32) for
	% list_of_primes(n - 1)
	  % proved
	list_of_primes_TCC2: OBLIGATION
	FORALL (n: nat): NOT n < 2 AND prime?(n) IMPLIES n - 1 < n
	
	% Subtype TCC generated (at line 14, column 52) for  (: n :)
	% expected type  list[(prime?)]
	  % proved
	list_of_primes_TCC3: OBLIGATION
	FORALL (n: nat):
	    NOT n < 2 AND prime?(n) IMPLIES
	     every[number]
	         (LAMBDA (x: number):
	                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	             AND integer_pred(x) AND (prime?)(x))
	         ((: n :))
	
	% Subtype TCC generated (at line 15, column 24) for  n - 1
	% expected type  nat
	  % proved
	list_of_primes_TCC4: OBLIGATION
	FORALL (n: nat): NOT n < 2 AND NOT prime?(n) IMPLIES n - 1 >= 0
	
	% Termination TCC generated (at line 15, column 9) for
	% list_of_primes(n - 1)
	  % proved
	list_of_primes_TCC5: OBLIGATION
	FORALL (n: nat): NOT n < 2 AND NOT prime?(n) IMPLIES n - 1 < n
	
	% Subtype TCC generated (at line 27, column 13) for  l
	% expected type  (cons?[nat])
	  % untried
	list_prod_TCC1: OBLIGATION
	FORALL (l: list[nat]): NOT null?(l) IMPLIES cons?[nat](l)
	
	% Termination TCC generated (at line 27, column 18) for  list_prod(cdr(l))
	  % untried
	list_prod_TCC2: OBLIGATION
	FORALL (l: list[nat]):
	    NOT null?(l) IMPLIES length[nat](cdr[nat](l)) < length[nat](l)
	
	% The subtype TCC (at line 27, column 32) in decl nil for
	% term generated from list_prod  l
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 32, column 17) for  list_of_primes(i)
	% expected type  list[nat]
	  % untried
	prod_leq_n_TCC1: OBLIGATION
	FORALL (n: posnat, i: below[n]):
	    every[number]
	        (LAMBDA (x: number):
	                number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	            AND integer_pred(x) AND (x >= 0))
	        (list_of_primes(i))
	
	% The subtype TCC (at line 27, column 32) in decl nil for
	 % term generated from list_prod  l
	    % expected type  (cons?[nat])
	  % is subsumed by list_prod_TCC1
	
	% Subtype TCC generated (at line 34, column 24) for  i - 1
	% expected type  below[n]
	  % untried
	prod_leq_n_TCC2: OBLIGATION
	FORALL (n: posnat, i: below[n]):
	    NOT list_prod(list_of_primes(i)) <= n IMPLIES i - 1 >= 0 AND i - 1 < n
	
	% Termination TCC generated (at line 34, column 9) for  prod_leq_n(n, i - 1)
	  % untried
	prod_leq_n_TCC3: OBLIGATION
	FORALL (n: posnat, i: below[n]):
	    NOT list_prod(list_of_primes(i)) <= n IMPLIES i - 1 < i
	
	% The subtype TCC (at line 33, column 6) in decl nil for
	% term generated from prod_leq_n  list_of_primes(i)
	% expected type  list[nat]
	% Subtype TCC generated (at line 43, column 22) for  i
	% expected type  below[length[nonneg_int](pl)]
	  % proved
	signature_pred_TCC1: OBLIGATION
	FORALL (pl: list[posnat], l: list[nat] | length[nat](l) = length[posnat](pl),
	          i: below[length[nat](l)]):
	    i < length[nonneg_int](pl)
	
	% The subtype TCC (at line 33, column 6) in decl nil for
	 % term generated from prod_leq_n  list_of_primes(i)
	    % expected type  list[nat]
	  % is subsumed by prod_leq_n_TCC1
	
	% Termination TCC generated (at line 48, column 36) for  sign_aux(n)(t)
	  % proved
	sign_aux_TCC1: OBLIGATION
	FORALL (l: list[posnat], h: posnat, t: list[posnat]):
	    l = cons(h, t) IMPLIES length[posnat](t) < length[posnat](l)
	
	% Subtype TCC generated (at line 55, column 29) for  nth(primes_l, j)
	% expected type  {n: int | NOT abs(n) + abs(nth(primes_l, i)) = 0}
	  % untried
	mut_primes_TCC1: OBLIGATION
	FORALL (primes_l: list[posnat], i, j: below[length[posnat](primes_l)]):
	    i /= j IMPLIES
	     NOT abs(nth[posnat](primes_l, j)) + abs(nth[posnat](primes_l, i)) = 0
	
	% Subtype TCC generated (at line 59, column 18) for  -n
	% expected type  nat
	  % untried
	nmod_pos_TCC1: OBLIGATION
	FORALL (n: int): NOT n >= 0 IMPLIES -n >= 0
	
	% Subtype TCC generated (at line 59, column 9) for  p - nmod(-n, p)
	% expected type  mod(p)
	  % untried
	nmod_pos_TCC2: OBLIGATION
	FORALL (n: int, p: posnat):
	    NOT n >= 0 IMPLIES p - nmod(-n, p) >= 0 AND p - nmod(-n, p) < p
	
	% Subtype TCC generated (at line 65, column 53) for  signs
	% expected type  (cons?[nat])
	  % untried
	sign2nats_TCC1: OBLIGATION
	FORALL (primes_l: (cons?[posnat]) | mut_primes(primes_l),
	          signs: (signature_pred(primes_l))):
	    length(primes_l) = 1 IMPLIES cons?[nat](signs)
	
	% Subtype TCC generated (at line 70, column 33) for  prod
	% expected type  posnat
	  % untried
	sign2nats_TCC2: OBLIGATION
	FORALL (primes_l: (cons?[posnat]) | mut_primes(primes_l),
	          v:
	            [primes_l11:
	               {z: {primes_l: (cons?[posnat]) | mut_primes(primes_l)} |
	                  length[posnat](z) < length[posnat](primes_l)} ->
	               [(signature_pred(primes_l11)) -> [nat, nat]]],
	          signs: (signature_pred(primes_l))):
	    NOT length(primes_l) = 1 IMPLIES
	     FORALL (tuple: [nat, nat], prod: nat, val: nat):
	       tuple = v(cdr(primes_l))(cdr(signs)) AND
	        prod = tuple`1 AND val = tuple`2
	        IMPLIES prod > 0
	
	% Subtype TCC generated (at line 70, column 39) for  car(primes_l)
	% expected type  {n: posnat | prod /= n}
	  % untried
	sign2nats_TCC3: OBLIGATION
	FORALL (primes_l: (cons?[posnat]) | mut_primes(primes_l),
	          v:
	            [primes_l11:
	               {z: {primes_l: (cons?[posnat]) | mut_primes(primes_l)} |
	                  length[posnat](z) < length[posnat](primes_l)} ->
	               [(signature_pred(primes_l11)) -> [nat, nat]]],
	          signs: (signature_pred(primes_l))):
	    NOT length(primes_l) = 1 IMPLIES
	     FORALL (tuple: [nat, nat], prod: nat, val: nat):
	       tuple = v(cdr(primes_l))(cdr(signs)) AND
	        prod = tuple`1 AND val = tuple`2
	        IMPLIES prod /= car[posnat](primes_l)
	
	% Subtype TCC generated (at line 72, column 53) for  signs
	% expected type  (cons?[nat])
	  % untried
	sign2nats_TCC4: OBLIGATION
	FORALL (primes_l: (cons?[posnat]) | mut_primes(primes_l),
	          v:
	            [primes_l11:
	               {z: {primes_l: (cons?[posnat]) | mut_primes(primes_l)} |
	                  length[posnat](z) < length[posnat](primes_l)} ->
	               [(signature_pred(primes_l11)) -> [nat, nat]]],
	          signs: (signature_pred(primes_l))):
	    NOT length(primes_l) = 1 IMPLIES
	     FORALL (tuple: [nat, nat], prod: nat, val: nat, prod_inv: nat):
	       tuple = v(cdr(primes_l))(cdr(signs)) AND
	        prod = tuple`1 AND
	         val = tuple`2 AND prod_inv = linear_comb(prod, car(primes_l))`1
	        IMPLIES cons?[nat](signs)
	
	% Subtype TCC generated (at line 67, column 51) for  signs
	% expected type  (cons?[nat])
	  % untried
	sign2nats_TCC5: OBLIGATION
	FORALL (primes_l: (cons?[posnat]) | mut_primes(primes_l),
	          signs: (signature_pred(primes_l))):
	    NOT length(primes_l) = 1 IMPLIES cons?[nat](signs)
	
	% Subtype TCC generated (at line 67, column 47) for  cdr(signs)
	% expected type  (signature_pred(cdr(primes_l)))
	  % untried
	sign2nats_TCC6: OBLIGATION
	FORALL (primes_l: (cons?[posnat]) | mut_primes(primes_l),
	          signs: (signature_pred(primes_l))):
	    NOT length(primes_l) = 1 IMPLIES
	     length[nat](cdr[nat](signs)) = length[posnat](cdr[posnat](primes_l)) AND
	      signature_pred(cdr[posnat](primes_l))(cdr[nat](signs))
	
	% Subtype TCC generated (at line 67, column 32) for  cdr(primes_l)
	% expected type  {primes_l: (cons?[posnat]) | mut_primes(primes_l)}
	  % untried
	sign2nats_TCC7: OBLIGATION
	FORALL (primes_l: (cons?[posnat]) | mut_primes(primes_l),
	          signs: (signature_pred(primes_l))):
	    NOT length(primes_l) = 1 IMPLIES
	     cons?[posnat](cdr[posnat](primes_l)) AND mut_primes(cdr[posnat](primes_l))
	
	% Termination TCC generated (at line 67, column 22) for
	% sign2nats(cdr(primes_l))
	  % untried
	sign2nats_TCC8: OBLIGATION
	FORALL (primes_l: (cons?[posnat]) | mut_primes(primes_l),
	          signs: (signature_pred(primes_l))):
	    NOT length(primes_l) = 1 IMPLIES
	     length[posnat](cdr[posnat](primes_l)) < length[posnat](primes_l)
	
	% Subtype TCC generated (at line 79, column 31) for  p - 1
	% expected type  nat
	  % untried
	list_diff_TCC1: OBLIGATION
	FORALL (p, n: nat): NOT p = 0 AND p = n IMPLIES p - 1 >= 0
	
	% Termination TCC generated (at line 79, column 21) for  list_diff(p - 1)
	  % untried
	list_diff_TCC2: OBLIGATION
	FORALL (p, n: nat): NOT p = 0 AND p = n IMPLIES p - 1 < p
	
	% Subtype TCC generated (at line 80, column 27) for  p - 1
	% expected type  nat
	  % untried
	list_diff_TCC3: OBLIGATION
	FORALL (p, n: nat): NOT p = 0 AND NOT p = n IMPLIES p - 1 >= 0
	
	% Termination TCC generated (at line 80, column 17) for  list_diff(p - 1)
	  % untried
	list_diff_TCC4: OBLIGATION
	FORALL (p, n: nat): NOT p = 0 AND NOT p = n IMPLIES p - 1 < p
	
	% Subtype TCC generated (at line 88, column 43) for  signs
	% expected type  (cons?[nat])
	  % untried
	list_l_diff_TCC1: OBLIGATION
	FORALL (primes_l: list[posnat],
	          signs: list[nat] | length[nat](signs) = length[posnat](primes_l)):
	    NOT null?(primes_l) IMPLIES cons?[nat](signs)
	
	% Subtype TCC generated (at line 88, column 28) for  primes_l
	% expected type  (cons?)
	  % untried
	list_l_diff_TCC2: OBLIGATION
	FORALL (primes_l: list[posnat],
	          signs: list[nat] | length[nat](signs) = length[posnat](primes_l)):
	    NOT null?(primes_l) IMPLIES cons?[posnat](primes_l)
	
	% Subtype TCC generated (at line 88, column 79) for  cdr(signs)
	% expected type  {signs: list[nat] |
	%    length(signs) = length(cdr(primes_l))}
	  % untried
	list_l_diff_TCC3: OBLIGATION
	FORALL (primes_l: list[posnat],
	          signs: list[nat] | length[nat](signs) = length[posnat](primes_l)):
	    NOT null?(primes_l) IMPLIES
	     length[nat](cdr[nat](signs)) = length[posnat](cdr[posnat](primes_l))
	
	% Termination TCC generated (at line 88, column 52) for
	% list_l_diff(cdr(primes_l))
	  % untried
	list_l_diff_TCC4: OBLIGATION
	FORALL (primes_l: list[posnat],
	          signs: list[nat] | length[nat](signs) = length[posnat](primes_l)):
	    NOT null?(primes_l) IMPLIES
	     length[posnat](cdr[posnat](primes_l)) < length[posnat](primes_l)
	
	% The subtype TCC (at line 88, column 83) in decl nil for
	% term generated from list_l_diff  signs
	% expected type  (cons?[nat])
	% The subtype TCC (at line 88, column 68) in decl nil for
	% term generated from list_l_diff  primes_l
	% expected type  (cons?)
	% Subtype TCC generated (at line 94, column 26) for  l
	% expected type  (cons?[list[nat]])
	  % untried
	e_list_TCC1: OBLIGATION
	FORALL (l: list[list[nat]]): NOT null?(l) IMPLIES cons?[list[nat]](l)
	
	% The subtype TCC (at line 88, column 83) in decl nil for
	 % term generated from list_l_diff  signs
	    % expected type  (cons?[nat])
	  % is subsumed by list_l_diff_TCC1
	% The subtype TCC (at line 88, column 68) in decl nil for
	 % term generated from list_l_diff  primes_l
	    % expected type  (cons?)
	  % is subsumed by list_l_diff_TCC2
	
	% Termination TCC generated (at line 94, column 31) for  e_list(n, cdr(l))
	  % untried
	e_list_TCC2: OBLIGATION
	FORALL (l: list[list[nat]]):
	    NOT null?(l) IMPLIES
	     length[list[nat]](cdr[list[nat]](l)) < length[list[nat]](l)
	
	% The subtype TCC (at line 94, column 44) in decl nil for
	% term generated from e_list  l
	% expected type  (cons?[list[nat]])
	% The subtype TCC (at line 102, column 27) in decl nil for
	% term generated from cart_list  l1
	% expected type  (cons?[nat])
	% The subtype TCC (at line 102, column 53) in decl nil for
	% term generated from cart_list  l1
	% expected type  (cons?[nat])
	% The termination TCC (at line 102, column 39) in decl nil for
	% term generated from cart_list
	%  cart_list(cdr(l1), llnat)
	% The subtype TCC (at line 108, column 46) in decl nil for
	% term generated from list2onelist  l1
	% expected type  (cons?[nat])
	% The termination TCC (at line 108, column 29) in decl nil for
	% term generated from list2onelist
	%  list2onelist(cdr(l1))
	% Subtype TCC generated (at line 114, column 42) for  cdr(llnat)
	% expected type  (cons?[list[nat]])
	  % untried
	cart_Lists_TCC1: OBLIGATION
	FORALL (llnat: (cons?[list[nat]])):
	    NOT length(llnat) = 1 IMPLIES cons?[list[nat]](cdr[list[nat]](llnat))
	
	% The subtype TCC (at line 94, column 44) in decl nil for
	 % term generated from e_list  l
	    % expected type  (cons?[list[nat]])
	  % is subsumed by e_list_TCC1
	% The subtype TCC (at line 102, column 27) in decl nil for
	 % term generated from cart_list  l1
	    % expected type  (cons?[nat])
	  % is subsumed by list_prod_TCC1
	% The subtype TCC (at line 102, column 53) in decl nil for
	 % term generated from cart_list  l1
	    % expected type  (cons?[nat])
	  % is subsumed by list_prod_TCC1
	% The termination TCC (at line 102, column 39) in decl nil for
	 % term generated from cart_list
	    %  cart_list(cdr(l1), llnat)
	  % is subsumed by list_prod_TCC2
	% The subtype TCC (at line 108, column 46) in decl nil for
	 % term generated from list2onelist  l1
	    % expected type  (cons?[nat])
	  % is subsumed by list_prod_TCC1
	% The termination TCC (at line 108, column 29) in decl nil for
	 % term generated from list2onelist
	    %  list2onelist(cdr(l1))
	  % is subsumed by list_prod_TCC2
	
	% Termination TCC generated (at line 114, column 31) for
	% cart_Lists(cdr(llnat))
	  % untried
	cart_Lists_TCC2: OBLIGATION
	FORALL (llnat: (cons?[list[nat]])):
	    NOT length(llnat) = 1 IMPLIES
	     length[list[nat]](cdr[list[nat]](llnat)) < length[list[nat]](llnat)
	
	% Subtype TCC generated (at line 126, column 23) for  i
	% expected type  below[length[nat](sign_aux(n)(l))]
	  % proved
	sign_aux_correctness_TCC1: OBLIGATION
	FORALL (n: nat, l: list[posnat], i: below[length[posnat](l)]):
	    i < length[nat](sign_aux(n)(l))
	
	% Subtype TCC generated (at line 130, column 80) for  2 * n - 1
	% expected type  below[2 * n]
	  % untried
	Goldbach_list_signs_TCC1: OBLIGATION
	FORALL (n: posnat): 2 * n - 1 >= 0 AND 2 * n - 1 < 2 * n
	
	% Subtype TCC generated (at line 130, column 65) for
	% prod_leq_n(2 * n, 2 * n - 1)
	% expected type  list[posnat]
	  % untried
	Goldbach_list_signs_TCC2: OBLIGATION
	FORALL (n: posnat):
	    every[number]
	        (LAMBDA (x: number):
	                number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	            AND integer_pred(x) AND (x >= 0) AND (x > 0))
	        (prod_leq_n(2 * n, 2 * n - 1))
	
	% Subtype TCC generated (at line 130, column 51) for
	% (sign_aux(2 * n)(prod_leq_n(2 * n, 2 * n - 1)))
	% expected type  {signs: list[nat] |
	%    length(signs) =
	%     length(prod_leq_n(2 * n, 2 * n - 1))}
	  % untried
	Goldbach_list_signs_TCC3: OBLIGATION
	FORALL (n: posnat):
	    length[nat]((sign_aux(2 * n)(prod_leq_n(2 * n, 2 * n - 1)))) =
	     length[posnat](prod_leq_n(2 * n, 2 * n - 1))
	
	% Subtype TCC generated (at line 130, column 15) for
	% list_l_diff(prod_leq_n(2 * n, 2 * n - 1))
	%            ((sign_aux(2 * n)(prod_leq_n(2 * n, 2 * n - 1))))
	% expected type  (cons?[list[nat]])
	  % untried
	Goldbach_list_signs_TCC4: OBLIGATION
	FORALL (n: posnat):
	    cons?[list[nat]]
	        (list_l_diff(prod_leq_n(2 * n, 2 * n - 1))
	                    ((sign_aux(2 * n)(prod_leq_n(2 * n, 2 * n - 1)))))
	
	% The subtype TCC (at line 130, column 42) in decl nil for
	% term generated from Goldbach_list_signs  2 * n - 1
	% expected type  below[2 * n]
	% The subtype TCC (at line 130, column 27) in decl nil for
	% term generated from Goldbach_list_signs
	%  prod_leq_n(2 * n, 2 * n - 1)
	% expected type  list[posnat]
	% Subtype TCC generated (at line 133, column 73) for  Goldbach_list_signs(n)
	% expected type  list[(signature_pred(prod_leq_n(2 * n, 2 * n - 1)))]
	  % untried
	Goldbach_list_TCC1: OBLIGATION
	FORALL (n: posnat):
	    every[list[number]]
	        (LAMBDA (x1: list[number]):
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (x1)
	            AND
	            length[nat](x1) = length[posnat](prod_leq_n(2 * n, 2 * n - 1)) AND
	             signature_pred(prod_leq_n(2 * n, 2 * n - 1))(x1))
	        (Goldbach_list_signs(n))
	
	% The subtype TCC (at line 130, column 42) in decl nil for
	 % term generated from Goldbach_list_signs  2 * n - 1
	    % expected type  below[2 * n]
	  % is subsumed by Goldbach_list_signs_TCC1
	% The subtype TCC (at line 130, column 27) in decl nil for
	 % term generated from Goldbach_list_signs
	    %  prod_leq_n(2 * n, 2 * n - 1)
	    % expected type  list[posnat]
	  % is subsumed by Goldbach_list_signs_TCC2
	
	% Subtype TCC generated (at line 133, column 49) for
	% prod_leq_n(2 * n, 2 * n - 1)
	% expected type  {primes_l: (cons?[posnat]) | mut_primes(primes_l)}
	  % untried
	Goldbach_list_TCC2: OBLIGATION
	FORALL (n: posnat):
	    every[number]
	        (LAMBDA (x: number):
	                number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	            AND integer_pred(x) AND (x >= 0) AND (x > 0))
	        (prod_leq_n(2 * n, 2 * n - 1))
	     AND
	     cons?[posnat](prod_leq_n(2 * n, 2 * n - 1)) AND
	      mut_primes(prod_leq_n(2 * n, 2 * n - 1))
	
	% The subtype TCC (at line 133, column 64) in decl nil for
	% term generated from Goldbach_list  2 * n - 1
	% expected type  below[2 * n]
	% The subtype TCC (at line 133, column 34) in decl nil for
	% term generated from Goldbach_list  map
	% expected type  below[2 * n]
	% The subtype TCC (at line 133, column 34) in decl nil for
	% term generated from Goldbach_list  map
	% expected type  list[posnat]
	% The subtype TCC (at line 133, column 34) in decl nil for
	% term generated from Goldbach_list  map
	% expected type  below[2 * n]
	% The subtype TCC (at line 133, column 34) in decl nil for
	% term generated from Goldbach_list  map
	% expected type  list[posnat]
	% Subtype TCC generated (at line 138, column 4) for
	% y + ((n + x + 2) * (n - x + 1)) / 2
	% expected type  nat
	  % untried
	kappa_TCC1: OBLIGATION
	FORALL (n: nat, x: below[n + 1], y: below[x + 1]):
	    integer_pred(y + ((n + x + 2) * (n - x + 1)) / 2) AND
	     y + ((n + x + 2) * (n - x + 1)) / 2 >= 0
	
	% The subtype TCC (at line 133, column 64) in decl nil for
	 % term generated from Goldbach_list  2 * n - 1
	    % expected type  below[2 * n]
	  % is subsumed by Goldbach_list_signs_TCC1
	% The subtype TCC (at line 133, column 34) in decl nil for
	 % term generated from Goldbach_list  map
	    % expected type  below[2 * n]
	  % is subsumed by Goldbach_list_signs_TCC1
	% The subtype TCC (at line 133, column 34) in decl nil for
	 % term generated from Goldbach_list  map
	    % expected type  list[posnat]
	  % is subsumed by Goldbach_list_signs_TCC2
	% The subtype TCC (at line 133, column 34) in decl nil for
	 % term generated from Goldbach_list  map
	    % expected type  below[2 * n]
	  % is subsumed by Goldbach_list_signs_TCC1
	% The subtype TCC (at line 133, column 34) in decl nil for
	 % term generated from Goldbach_list  map
	    % expected type  list[posnat]
	  % is subsumed by Goldbach_list_signs_TCC2
	
	% Subtype TCC generated (at line 142, column 35) for  x + 1
	% expected type  below[1 + n]
	  % untried
	kappa__TCC1: OBLIGATION
	FORALL (n: nat, x: below[n + 1], y: below[x + 1]):
	    NOT x = n AND y = 0 IMPLIES x + 1 < 1 + n
	
	% Subtype TCC generated (at line 142, column 39) for  x + 1
	% expected type  below[2 + x]
	  % untried
	kappa__TCC2: OBLIGATION
	FORALL (n: nat, x: below[n + 1], y: below[x + 1]):
	    NOT x = n AND y = 0 IMPLIES x + 1 < 2 + x
	
	% Termination TCC generated (at line 142, column 25) for
	% kappa_(n)(x + 1, x + 1)
	  % untried
	kappa__TCC3: OBLIGATION
	FORALL (n: nat, x: below[n + 1], y: below[x + 1]):
	    NOT x = n AND y = 0 IMPLIES kappa(n)(x + 1, x + 1) < kappa(n)(x, y)
	
	% Subtype TCC generated (at line 143, column 25) for  y - 1
	% expected type  below[1 + x]
	  % untried
	kappa__TCC4: OBLIGATION
	FORALL (n: nat, x: below[n + 1], y: below[x + 1]):
	    NOT x = n AND NOT y = 0 IMPLIES y - 1 >= 0 AND y - 1 < 1 + x
	
	% Termination TCC generated (at line 143, column 13) for
	% kappa_(n)(x, y - 1)
	  % untried
	kappa__TCC5: OBLIGATION
	FORALL (n: nat, x: below[n + 1], y: below[x + 1]):
	    NOT x = n AND NOT y = 0 IMPLIES kappa(n)(x, y - 1) < kappa(n)(x, y)

END Goldbach_TCCS