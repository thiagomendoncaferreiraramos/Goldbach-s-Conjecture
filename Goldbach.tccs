%% TCCs associated with theory Goldbach
%% This file was automatically generated by PVS, please **do not modify** by hand.
Goldbach_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 14, column 47) for  n - 1
	% expected type  nat
	  % proved
	list_of_primes_TCC1: OBLIGATION
	FORALL (n: nat): NOT n < 2 AND prime?(n) IMPLIES n - 1 >= 0
	
	% Termination TCC generated (at line 14, column 32) for
	% list_of_primes(n - 1)
	  % proved
	list_of_primes_TCC2: OBLIGATION
	FORALL (n: nat): NOT n < 2 AND prime?(n) IMPLIES n - 1 < n
	
	% Subtype TCC generated (at line 14, column 52) for  (: n :)
	% expected type  list[(prime?)]
	  % proved
	list_of_primes_TCC3: OBLIGATION
	FORALL (n: nat):
	    NOT n < 2 AND prime?(n) IMPLIES
	     every[number]
	         (LAMBDA (x: number):
	                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	             AND integer_pred(x) AND (prime?)(x))
	         ((: n :))
	
	% Subtype TCC generated (at line 15, column 24) for  n - 1
	% expected type  nat
	  % proved
	list_of_primes_TCC4: OBLIGATION
	FORALL (n: nat): NOT n < 2 AND NOT prime?(n) IMPLIES n - 1 >= 0
	
	% Termination TCC generated (at line 15, column 9) for
	% list_of_primes(n - 1)
	  % proved
	list_of_primes_TCC5: OBLIGATION
	FORALL (n: nat): NOT n < 2 AND NOT prime?(n) IMPLIES n - 1 < n
	
	% Subtype TCC generated (at line 26, column 13) for  l
	% expected type  (cons?[nat])
	  % proved
	prod_list_TCC1: OBLIGATION
	FORALL (l: list[nat]): NOT null?(l) IMPLIES cons?[nat](l)
	
	% Termination TCC generated (at line 26, column 18) for  prod_list(cdr(l))
	  % proved
	prod_list_TCC2: OBLIGATION
	FORALL (l: list[nat]):
	    NOT null?(l) IMPLIES length[nat](cdr[nat](l)) < length[nat](l)
	
	% The subtype TCC (at line 26, column 32) in decl nil for
	% term generated from prod_list  l
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 33, column 22) for  i
	% expected type  below[length[nonneg_int](pl)]
	  % proved
	signature_pred_TCC1: OBLIGATION
	FORALL (pl: list[posnat], l: list[nat] | length[nat](l) = length[posnat](pl),
	          i: below[length[nat](l)]):
	    i < length[nonneg_int](pl)
	
	% The subtype TCC (at line 26, column 32) in decl nil for
	 % term generated from prod_list  l
	    % expected type  (cons?[nat])
	  % is subsumed by prod_list_TCC1
	
	% Termination TCC generated (at line 38, column 36) for  sign_aux(n)(t)
	  % proved
	sign_aux_TCC1: OBLIGATION
	FORALL (l: list[posnat], h: posnat, t: list[posnat]):
	    l = cons(h, t) IMPLIES length[posnat](t) < length[posnat](l)
	
	% Subtype TCC generated (at line 44, column 18) for  -n
	% expected type  nat
	  % untried
	nmod_pos_TCC1: OBLIGATION
	FORALL (n: int): NOT n >= 0 IMPLIES -n >= 0
	
	% Subtype TCC generated (at line 44, column 9) for  p - nmod(-n, p)
	% expected type  mod(p)
	  % untried
	nmod_pos_TCC2: OBLIGATION
	FORALL (n: int, p: posnat):
	    NOT n >= 0 IMPLIES p - nmod(-n, p) >= 0 AND p - nmod(-n, p) < p
	
	% Subtype TCC generated (at line 49, column 53) for  signs
	% expected type  (cons?[nat])
	  % untried
	sign2nats_TCC1: OBLIGATION
	FORALL (primes_l: (cons?[posnat]), signs: (signature_pred(primes_l))):
	    length(primes_l) = 1 IMPLIES cons?[nat](signs)
	
	% Subtype TCC generated (at line 54, column 33) for  prod
	% expected type  posnat
	  % untried
	sign2nats_TCC2: OBLIGATION
	FORALL (primes_l: (cons?[posnat]),
	          v:
	            [primes_l1:
	               {z: (cons?[posnat]) |
	                  length[posnat](z) < length[posnat](primes_l)} ->
	               [(signature_pred(primes_l1)) -> [nat, nat]]],
	          signs: (signature_pred(primes_l))):
	    NOT length(primes_l) = 1 IMPLIES
	     FORALL (tuple: [nat, nat], prod: nat, val: nat):
	       tuple = v(cdr(primes_l))(cdr(signs)) AND
	        prod = tuple`1 AND val = tuple`2
	        IMPLIES prod > 0
	
	% Subtype TCC generated (at line 54, column 39) for  car(primes_l)
	% expected type  {n: posnat | prod /= n}
	  % untried
	sign2nats_TCC3: OBLIGATION
	FORALL (primes_l: (cons?[posnat]),
	          v:
	            [primes_l1:
	               {z: (cons?[posnat]) |
	                  length[posnat](z) < length[posnat](primes_l)} ->
	               [(signature_pred(primes_l1)) -> [nat, nat]]],
	          signs: (signature_pred(primes_l))):
	    NOT length(primes_l) = 1 IMPLIES
	     FORALL (tuple: [nat, nat], prod: nat, val: nat):
	       tuple = v(cdr(primes_l))(cdr(signs)) AND
	        prod = tuple`1 AND val = tuple`2
	        IMPLIES prod /= car[posnat](primes_l)
	
	% Subtype TCC generated (at line 56, column 53) for  signs
	% expected type  (cons?[nat])
	  % untried
	sign2nats_TCC4: OBLIGATION
	FORALL (primes_l: (cons?[posnat]),
	          v:
	            [primes_l1:
	               {z: (cons?[posnat]) |
	                  length[posnat](z) < length[posnat](primes_l)} ->
	               [(signature_pred(primes_l1)) -> [nat, nat]]],
	          signs: (signature_pred(primes_l))):
	    NOT length(primes_l) = 1 IMPLIES
	     FORALL (tuple: [nat, nat], prod: nat, val: nat, prod_inv: nat):
	       tuple = v(cdr(primes_l))(cdr(signs)) AND
	        prod = tuple`1 AND
	         val = tuple`2 AND prod_inv = linear_comb(prod, car(primes_l))`1
	        IMPLIES cons?[nat](signs)
	
	% Subtype TCC generated (at line 51, column 51) for  signs
	% expected type  (cons?[nat])
	  % untried
	sign2nats_TCC5: OBLIGATION
	FORALL (primes_l: (cons?[posnat]), signs: (signature_pred(primes_l))):
	    NOT length(primes_l) = 1 IMPLIES cons?[nat](signs)
	
	% Subtype TCC generated (at line 51, column 47) for  cdr(signs)
	% expected type  (signature_pred(cdr(primes_l)))
	  % untried
	sign2nats_TCC6: OBLIGATION
	FORALL (primes_l: (cons?[posnat]), signs: (signature_pred(primes_l))):
	    NOT length(primes_l) = 1 IMPLIES
	     length[nat](cdr[nat](signs)) = length[posnat](cdr[posnat](primes_l)) AND
	      signature_pred(cdr[posnat](primes_l))(cdr[nat](signs))
	
	% Subtype TCC generated (at line 51, column 32) for  cdr(primes_l)
	% expected type  (cons?[posnat])
	  % untried
	sign2nats_TCC7: OBLIGATION
	FORALL (primes_l: (cons?[posnat]), signs: (signature_pred(primes_l))):
	    NOT length(primes_l) = 1 IMPLIES cons?[posnat](cdr[posnat](primes_l))
	
	% Termination TCC generated (at line 51, column 22) for
	% sign2nats(cdr(primes_l))
	  % untried
	sign2nats_TCC8: OBLIGATION
	FORALL (primes_l: (cons?[posnat]), signs: (signature_pred(primes_l))):
	    NOT length(primes_l) = 1 IMPLIES
	     length[posnat](cdr[posnat](primes_l)) < length[posnat](primes_l)
	
	% The subtype TCC (at line 57, column 34) in decl nil for
	% term generated from sign2nats  signs
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 69, column 23) for  i
	% expected type  below[length[nat](sign_aux(n)(l))]
	  % proved
	sign_aux_correctness_TCC1: OBLIGATION
	FORALL (n: nat, l: list[posnat], i: below[length[posnat](l)]):
	    i < length[nat](sign_aux(n)(l))
	
	% The subtype TCC (at line 57, column 34) in decl nil for
	 % term generated from sign2nats  signs
	    % expected type  (cons?[nat])
	  % is subsumed by sign2nats_TCC4

END Goldbach_TCCS